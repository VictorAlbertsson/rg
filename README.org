#+TITLE: Realtime Graphics
#+SUBTITLE: one-stop-shop API for graphical Rust applications
#+AUTHOR: Victor Albertsson
#+OPTIONS: num:nil toc:nil
* Outline
** Entrypoint
*** Application
Has the following fields:
- LayerStack
- Window
*** LayerStack
Type signature: Vec<Layer>
*** Layer
Type signature: Vec<Box<Event>>

A layer is a collection of dynamically allocated events.
*** Event
Type signature: dyn Fn() -> bool

An event is some function that takes no arguments and returns a boolean.
** Windowing and layers
*** [[https://github.com/rust-windowing/winit][Winit]]

"/Cross-platform window creation and management in Rust/"

*** Input
*** Events
** Renderer
*** [[https://github.com/MaikKlein/ash][Ash]]

"/A very lightweight wrapper around Vulkan/"

** Render API abstraction
** Debugging support
** Scripting language
*** [[https://github.com/murarth/ketos][Ketos]]

"/The primary goal of Ketos is to serve as a scripting and extension
language for programs written in the Rust programming language./"

** Memory systems
** Entity-component system (ECS) (will likely be moved to a separate project)
** File I/O, VFS
** Networking (will likely be moved to a separate project)
*** [[https://web.mit.edu/Kerberos/][Kerberos]]
"/Kerberos is a network authentication protocol./"

It is designed to provide strong authentication for client/server
applications by using secret-key cryptography.

Fun fact: Resistant to quantum deciphering.

[[https://www.youtube.com/watch?v=qW361k3-BtU][Taming Kerberos - Computerphile]]
** Build system (will likely be moved to a separate project)
*** Hotswapping assets
* Timeline
** TODO School project [25%]
- [X] Window and rudimentary input system
- [ ] Layer system
- [ ] Basic rendering and UI

*** Week 20 (VT 2020)
- Layers
- Vulkan context creation

*** Week 21 (VT 2020)
- Vulkan context creation

*** Week 22 (VT 2020)
- Rendering

** MVP (1.0.0) [0%]
- [ ] Vulkan renderer
  - [ ] Basic pipeline
  - [ ] Texture pipeline
  - [ ] Rasterizer
  - [ ] Raytracer
- [-] Unified windowing abstractions
  - [X] Desktop
  - [ ] Mobile
  - [ ] Web
- [ ] User input with cross-platform keycodes
- [ ] UI system (with debugging specific UI)
- [ ] Simple physics engine
** Product release (2.0.0) [0%]
- [ ] OpenGL, Vulkan, Metal, DirectX12 unified renderer
- [ ] Flexible and extensible event systems
- [ ] ECS (Entity-Component System)
- [ ] Scripting language
- [ ] Performant physics engine
- [ ] Concurrency and multithreading
- [ ] Asset management system
- [ ] Advanced input system with raycasters (2D + 3D + UI)
* Relevant Papers
- [[https://github.com/vcg-uvic/viper][VIPER]]
- [[http://theorangeduck.com/page/phase-functioned-neural-networks-character-control][Phase-Functioned Neural Networks for Character Control]]
